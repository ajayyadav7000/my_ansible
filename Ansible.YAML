Suppose you have to modify /etc/host file of a server, what are the chances that you will be making any mistake?
I would say very little, how about if you have to make this chnage on hundred of servers?
The chances of making missconfiguration increases many times  right....?

This is where the Configuration management tools comes fr the rescue. It keeps you away from any 
misconfigurations.


This kind of missconfiguration can lead to poor performance, inconsistencies, or noncompliance and 
negatively impact business operations and security. 

Another reason for using Config managment tool is that you document each and every chnage and When 
documented changes are made across many systems and applications, there are very less scope of any
inconsinstability and downtime.

With the help of Configuration Management tool, we can:

Classify and manage systems by groups and subgroups. 
Centrally modify base configurations.
Roll out new settings to all applicable systems. 
Automate system identification, patches, and updates
Identify outdated, poor performing, and noncompliant configurations. 
Prioritize actions. 
Access and apply prescriptive remediation.


Advanatages of Config Managemt Tools:

Automating configuration management, with configuration management you can maintain the  systems in a desired state.

With configuration management, you make the config chnages first on Dev/Test environment, if all goes well
you can accurately replicate this over production environment.

With consiguration managemnent tool, a configuration management tool can provision a new server within minutes with less 
room for error.

With config management tool, you can improve system recovery by deploying the chnages quickly.

Your configuration management tools can also help you to run an audit of your system so you can more quickly 
identify where the problem is coming from. 




Ansible Modules:
These are Python programs that got install by default when you install Ansible.
These modules are also know as command centre.

Inventory:
List, basically list of client hosts.

Ansible COnfig:
Which holds all the Ansible configuration of Ansible.

Playbooks:
YAML file, that contains some tasks


How the Push Macenism works?

ACM -- Run the playbooks -- > A small python package is created --> SSH connection opened b/w master and Slave
Via this SSH connection this python package is copied to the host machine ---> Python package is getting executed
in the host machine ---> Once the package is applied, it is getting deleted from the host machine.



---
  - name: Playbook
    hosts: webservers
    become: yes
    become_user: root
    tasks:
      - name: ensure apache is at the latest version
        apt:
          name: httpd
          state: latest
      - name: ensure apache is running
        service:
          name: httpd
          state: started